<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="nyu.alex.dao.mapper.IBookingAgentDao">

    <resultMap id="ticket" type="Ticket">
        <id property="ticket_id" column="ticket_id"></id>
        <result property="airlineName" column="airline_name"></result>
        <result property="flightNum" column="flight_num"></result>
    </resultMap>

    <resultMap id="customer" type="Customer">
        <id property="email" column="email"></id>
        <result property="ticketsFromAgent" column="ticketsFromAgent"></result>
        <result property="totalCommission" column="totalCommission"></result>
    </resultMap>

    <resultMap id="bookingAgent" type="BookingAgent">
        <id property="email" column="email"></id>
        <result property="password" column="password"></result>
        <result property="bookingAgentId" column="booking_agent_id"></result>
        <result property="commissionFees" column="tot_comm"></result>
        <result property="totalSales" column="tot_sales"></result>
        <result property="averageCommissionFees" column="avg_comm"></result>
        <result property="ticketBooked" column="comm_num"></result>
        <collection property="airlineNames" javaType="java.util.ArrayList" ofType="String">
        </collection>
    </resultMap>

    <!-- 已测试-->
    <select id="findBookingAgentByEmail" resultMap="bookingAgent">
        select a.*,b.airline_name from booking_agent as a
        left join booking_agent_work_for as b
            on a.email = b.email
        where a.email=#{email}
    </select>

    <sql id="findCommissionTemplate">
        select count(*) as comm_num,avg(price)*0.1 as avg_comm,sum(price)*0.1 as tot_comm,b.email as email,b.password as password
        from booking_agent b
        left join purchases p
        on p.booking_agent_id = b.booking_agent_id
        left join ticket t
        on t.ticket_id = p.ticket_id
        left join flight f
        on f.flight_num = t.flight_num
        and f.airline_name = t.airline_name
    </sql>

    <select id="findMyFlights" resultMap="nyu.alex.dao.mapper.IFlightDao.allFlightInfoLite">

        select * from flight f
        join ticket t on f.airline_name = t.airline_name and f.flight_num = t.flight_num
        join purchases p on p.ticket_id = t.ticket_id
        <where>
            <if test="default == true">
                and f.depature_time &gt;= NOW()
            </if>
            <if test="sourceAirportName != null">
                and f.departure_airport = #{sourceAirportName}
            </if>
            <if test="destAirportName != null">
                and f.arrival_airport = #{destAirportName}
            </if>
            <if test="startDate != null">
                and p.purchase_date &gt;= #{startDate}
            </if>
            <if test="endDate != null">
                and p.purchase_date &lt;= #{endDate}
            </if>
            and p.booking_agent_id is not null
        </where>

    </select>

    <select id="bookTicket" statementType="CALLABLE"  parameterType="java.util.HashMap" resultType="java.util.Map" >
        {
            call purchaseTicket(#{ticketNum,mode=OUT,jdbcType=VARCHAR},#{purchaseDate,mode=OUT,jdbcType=DATE},
            #{commissionFee,mode=OUT,jdbcType=NUMERIC},#{flightNum,mode=IN},#{airlineName,mode=IN},#{email,mode=IN},#{bookingAgentId,mode=IN})
        }
    </select>

    <select id="findAllTicketInfo" resultMap="ticket">
        select t.* from ticket t where airline_name=#{airlineName} and flight_num = #{flightNum}
        and t.ticket_id not in (select p.ticket_id from purchases p)
    </select>

    <select id="findCommissionInfo" resultMap="bookingAgent">
        <include refid="findCommissionTemplate"/>
        <where>
            b.email = #{email}
            <if test="startDate==null || endDate==null">
                and TO_DAYS(NOW()) - TO_DAYS(p.purchase_date) &lt;= 30
            </if>
            <if test="startDate!=null">
                and p.purchase_date &gt;= #{startDate}
                and p.purchase_date &lt;= #{endDate}
            </if>
            group by b.email order by tot_comm
        </where>
    </select>

    <!-- Top Customers-->
    <select id="findTopKCommission" resultMap="customer">
        with tmp_result as (select c.email as email,sum(f.price)*0.9 as totalCommission from customer c
        left join purchases p
        on p.customer_email = c.email
        left join ticket t
        on t.ticket_id = p.ticket_id
        left join flight f
        on f.flight_num = t.flight_num
        and f.airline_name = t.airline_name
        <where>
            p.booking_agent_id is not null
            and p.purchase_date > date_sub(NOW(),interval 1 YEAR)
            group by c.email
            order by totalCommission

        </where>)
        select * from tmp_result
        UNION ALL(select email,0 as totalCommission from customer where email not in
        (select tmp.email from tmp_result tmp))
        <if test="K !=null">
            limit #{K}
        </if>
    </select>

    <!-- Top Customers-->
    <select id="findTopKTickets" resultMap="customer">
        with tmp_result as(select c.email as email,count(distinct ticket_id) as ticketsFromAgent from customer c
        left join purchases p on p.customer_email = c.email<where>p.booking_agent_id is not null
        and p.purchase_date > date_sub(NOW(),interval 6 MONTH)
        group by c.email
        order by ticketsFromAgent
       ) select * from tmp_result
        UNION ALL(select email,0 as ticketsFromAgent from customer where email not in
        (select tmp.email from tmp_result tmp))
        <if test="K!=null">
            limit #{K}
        </if></where>
    </select>

    <insert id="insertBookingAgent" parameterType="nyu.alex.dao.entity.BookingAgent">
        insert into booking_agent values(#{email},#{password},#{bookingAgentId})
    </insert>

    <update id="updateBookingAgent" parameterType="nyu.alex.dao.entity.BookingAgent">
        update booking_agent set password = #{password},booking_agent_id=#{bookingAgentId}
        where email = #{email}
    </update>
</mapper>