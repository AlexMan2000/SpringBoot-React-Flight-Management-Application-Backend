<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="nyu.alex.dao.mapper.IAirlineStaffDao">
    <resultMap id="airplane" type="Airplane">
        <id column="airplane_id" property="id"></id>
        <id column="airline_name" property="airline"></id>
        <result column="seats" property="seats"></result>
    </resultMap>


    <resultMap id="bookingAgentLite" type="BookingAgent">
        <id property="email" column="email"></id>
    </resultMap>

    <resultMap id="customerLite" type="Customer">
        <id property="email" column="email"></id>
        <result property="name" column="name"></result>
        <result property="password" column="password"></result>
        <result property="buildingNumber" column="building_number"></result>
        <result property="street" column="street"></result>
        <result property="city" column="city"></result>
        <result property="livingState" column="state"></result>
        <result property="phoneNumber" column="phone_number"></result>
        <result property="passportNumber" column="passport_number"></result>
        <result property="passportExpiration" column="passport_expiration"></result>
        <result property="passportCountry" column="passport_country"></result>
        <result property="birthday" column="date_of_birth"></result>
    </resultMap>

    <resultMap id="airlineStaff" type="AirlineStaff">
        <id property="username" column="username"></id>
        <result property="password" column="password"></result>
        <result property="firstName" column="first_name"></result>
        <result property="lastName" column="last_name"></result>
        <result property="birthday" column="date_of_birth"></result>
        <result property="airlineName" column="airline_name"></result>
        <result property="departureTime" column="departure_time" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"></result>
        <result property="arrivalTime" column="arrival_time" jdbcType="TIMESTAMP" javaType="java.sql.Timestamp"></result>
        <collection property="permissionDescription" ofType="String" resultMap="permissionType"></collection>
    </resultMap>

    <resultMap id="ticketInfo" type="nyu.alex.utils.dataUtils.TicketInfo">
        <id property="year" column="year"></id>
        <id property="month" column="month"></id>
        <result property="ticketNumber" column="num_of_tickets" javaType="Integer" ></result>
    </resultMap>

    <resultMap id="permissionType" type="String">
        <result column="permission_level"></result>
    </resultMap>

    <!-- 用来话ViewReports-->
    <resultMap id="columnMappingReports" type="nyu.alex.utils.dataUtils.DataRow">
        <result property="interval" column="dateFormatted" ></result>
        <result property="value" column="tot_tickets" javaType="Float" jdbcType="NUMERIC"></result>
    </resultMap>

    <!-- 用来画RevenueComparison-->
    <resultMap id="columnMappingComparison" type="nyu.alex.utils.dataUtils.DataRow">
        <result property="type" column="type"></result>
        <result property="value" column="tot_sales" javaType="Float" jdbcType="NUMERIC"></result>
    </resultMap>

    <!-- 用来画TopDestinations-->
    <resultMap id="columnMappingDestinations" type="nyu.alex.utils.dataUtils.DataRow">
        <result property="type" column="destination"></result>
        <result property="value" column="tot_tickets" javaType="Float" jdbcType="NUMERIC"></result>
    </resultMap>

    <!--已测试-->
    <select id="findAirlineStaffByName" resultMap="airlineStaff">
        select a.*,p.permission_type as permission_level from airline_staff as a
        left join permission as p on
            a.username = p.username
        where a.username=#{name}
    </select>

    <select id="findAirlineStaffByNameAndAirline" resultMap="airlineStaff">
        select a.*,p.permission_type as permission_level from airline_staff as a
                                                                  left join permission as p on
            a.username = p.username
        where a.username=#{userName} and a.airline_name=#{airlineName}
    </select>

    <select id="findTopKSales" resultMap="nyu.alex.dao.mapper.IBookingAgentDao.bookingAgent">
        (select b.email as email,sum(f.price)*1.1 as tot_sales
        from booking_agent b left join purchases p on b.booking_agent_id = p.booking_agent_id
        left join ticket t on p.ticket_id = t.ticket_id
        left join flight f on t.airline_name = f.airline_name and t.flight_num = f.flight_num
        <where>
            p.booking_agent_id is not null
            and p.purchase_date > date_sub(NOW(),interval #{past} MONTH)
            group by b.email
            order by tot_sales desc
        </where>)UNION(select email,0 as tot_sales from booking_agent)
        <if test="K !=null">
            limit #{K}
        </if>
    </select>


    <select id="findTopKCommission" resultMap="nyu.alex.dao.mapper.IBookingAgentDao.bookingAgent">
        (select b.email as email,
        sum(f.price)*0.1
        as tot_comm from booking_agent b left join purchases p on b.booking_agent_id = p.booking_agent_id
        left join ticket t on p.ticket_id = t.ticket_id
        left join flight f on t.airline_name = f.airline_name and t.flight_num = f.flight_num
        <where>
            p.booking_agent_id is not null
            and p.purchase_date > date_sub(NOW(),interval 12 MONTH)
            group by b.email
            order by tot_comm desc
        </where>)UNION(select email,0 as tot_sales from booking_agent)
        <if test="K !=null">
            limit #{K}
        </if>
    </select>

    <select id="findViewReports" resultMap="columnMappingReports">
        set @start_date = date_format(date_sub(NOW(),interval 12 MONTH),'%Y-%m-%d');
        with data as (
                select date_format(p.purchase_date,'%Y-%m') as dateFormatted,
                       count(t.ticket_id) as tot_tickets
                from flight f join ticket t on f.airline_name = t.airline_name and f.flight_num = t.flight_num
                join purchases p on t.ticket_id = p.ticket_id
                <where> f.airline_name = #{airlineName}
                    and p.purchase_date &gt;= date_sub(NOW(),interval 12 MONTH)
                <if test="startDate!=null and endDate!=null">
                    and p.purchase_date &gt;= #{startDate}
                    and p.purchase_date &lt;= #{endDate}
                </if>
                </where>
                group by date_format(p.purchase_date,'%Y-%m')
            ),
        tmp_result as (
            with recursive months(m) as (
                select 0
                union all
                select m + 1
                from months
                where m &lt;= 11
                )
                select date_format(@start_date + interval m.m month,'%Y-%m') as dateFormatted, 0 as tot_tickets
                from months m
                order by m.m asc
        )

        select * from data union all (select * from tmp_result t
        where t.dateFormatted not in (select d.dateFormatted from data d)
        ) order by dateFormatted


    </select>

    <!-- For a particular airline company-->
    <select id="findRevenueInfo" resultMap="columnMappingComparison">
        WITH directSales AS (
            SELECT
                'direct_sales' as type,  case when
                                            sum( f.price ) is null then 0
                                            else sum( f.price ) end
            as tot_sales
            FROM
                purchases p
                    LEFT JOIN ticket t ON t.ticket_id = p.ticket_id
                    LEFT JOIN flight f ON f.flight_num = t.flight_num
                    AND f.airline_name = t.airline_name
            WHERE
                <if test="past=='year'">
                    p.purchase_date >= date_sub( NOW(), INTERVAL 1 YEAR )
                </if>
                 <if test="past=='month'">
                     p.purchase_date >= date_sub( NOW(), INTERVAL 1 MONTH )
                 </if>
              AND f.airline_name = #{airlineName}
              AND p.booking_agent_id IS NULL
        ),
             indirectSales AS (
                 SELECT
                     'indrect sales' as type,  case
                     when sum( f.price ) is null then 0
                     else sum( f.price ) end
                as tot_sales
                 FROM
                     purchases p
                         LEFT JOIN ticket t ON t.ticket_id = p.ticket_id
                         LEFT JOIN flight f ON f.flight_num = t.flight_num
                         AND f.airline_name = t.airline_name
                 WHERE
                <if test="past=='year'">
                    p.purchase_date >= date_sub( NOW(), INTERVAL 1 YEAR )
                </if>
                <if test="past=='month'">
                    p.purchase_date >= date_sub( NOW(), INTERVAL 1 MONTH )
                </if>
                   AND f.airline_name = #{airlineName}
                   AND p.booking_agent_id IS NOT NULL
             )
                (select * from directSales)
                union all
                (select * from indirectSales) ;
    </select>

    <select id="viewTopDestinations" resultMap="columnMappingDestinations">
        with tmp_result as (SELECT
            f.arrival_airport AS destination,
            count( p.ticket_id ) AS tot_tickets
        FROM
            flight f
                LEFT JOIN ticket t ON f.airline_name = t.airline_name
                AND f.flight_num = t.flight_num
                LEFT JOIN purchases p ON p.ticket_id = t.ticket_id
        <where>
            <if test="past=='month'">
                and p.purchase_date >= date_sub( NOW(), INTERVAL 3 MONTH )
            </if>
            <if test="past=='year'">
                and p.purchase_date >= date_sub( NOW(), INTERVAL 1 YEAR )
            </if>
        </where>
        GROUP BY
            f.arrival_airport
        )
        select * from tmp_result UNION ALL
        ( SELECT DISTINCT arrival_airport AS destination, 0 AS tot_tickets
        FROM flight
        where arrival_airport not in
             (select tmp.destination from tmp_result tmp) )
        order by tot_tickets desc;
    </select>

    <select id="findFreqCustomers" parameterType="java.sql.Date" resultMap="nyu.alex.dao.mapper.ICustomerDao.customer">
        select distinct c.*,count(p.ticket_id) as total_tickets from customer c left join purchases p on c.email = p.customer_email
        left join ticket t on p.ticket_id = t.ticket_id
        left join flight f on t.airline_name = f.airline_name and t.flight_num = f.flight_num
        <where>
            <if test="airlineName!=null">
                and f.airline_name = #{airlineName}
            </if>
        </where>
        group by c.email order by total_tickets desc
    </select>

    <!--Deprecated-->
    <select id="findAmountOfTicketsEachPeriod" resultMap="ticketInfo">
        select MONTH(t.purchase_date) as month,YEAR(t.purchase_date) as year,count(*) as num_of_tickets from purchases t
        where YEAR(t.purchase_date) between #{year[0]} and #{year[1]}
        group by MONTH(t.purchase_date),YEAR(t.purchase_date)
    </select>

    <select id="total"></select>

    <!-- 已测试-->
    <insert id="insertNewAirplane" parameterType="nyu.alex.dao.entity.Airplane">
        insert into airplane values(#{airline},#{id},#{seats})
    </insert>

    <select id="findAirplane" parameterType="nyu.alex.dao.entity.Airplane" resultMap="airplane">
        select * from airplane where airline_name=#{airline} and airplane_id=#{id}
    </select>

    <select id="findAllAirplanesForAirline" resultMap="airplane">
        select * from airplane where airline_name=#{airlineName}
    </select>

    <insert id="insertNewAirport" parameterType="nyu.alex.dao.entity.Airport">
        insert into airport values(#{airportName},#{airportCity})
    </insert>

    <select id="findAirport" parameterType="nyu.alex.dao.entity.Airport" resultType="nyu.alex.dao.entity.Airport">
        select airport_name as airportName,airport_city as airportCity from airport where airport_name = #{airportName}
    </select>

    <!-- 已测试-->
    <insert id="insertNewFlight" parameterType="nyu.alex.dao.entity.Flight">
        insert into flight values
        (#{airlineName},#{flightNum},#{sourceAirportName},#{departureTime},#{destAirportName},#{arrivalTime},#{price},#{status},#{airplaneId})
    </insert>

    <select id="findFlight" parameterType="nyu.alex.dao.entity.Flight" resultType="nyu.alex.dao.entity.Flight">
        select * from flight where airline_name = #{airlineName} and flight_num = #{flightNum}
    </select>

    <insert id="insertNewAirlineStaff" parameterType="nyu.alex.dao.entity.AirlineStaff">
        insert into airline_staff values
        (#{username},#{password},#{firstName},#{lastName},#{birthday},#{airlineName})
    </insert>

    <!-- 已测试-->
    <update id="updateFlight" parameterType="nyu.alex.dao.entity.Flight">
        update flight set status=#{status} where flight_num=#{flightNum} and airline_name=#{airlineName}
    </update>

    <update id="updateAirlineStaff" parameterType="nyu.alex.dao.entity.AirlineStaff">
        update airline_staff set password=#{password},
                                 first_name=#{firstName},last_name=#{lastName},
                                 date_of_birth=#{birthdat},airline_name=#{airlineName} where
                                username = #{username}
    </update>

    <delete id="deleteFlight">
        delete from flight where flight_num = #{flightNumber} and airline_name = #{airlineName};
    </delete>

    <delete id="deleteFlights">
        delete from flight where (flight_num,airline_name) in #{key}
    </delete>

    <insert id="addAgent" >
        insert into booking_agent_work_for values(#{email},#{airlineName})
    </insert>

    <select id="findAgentWorkingFor" resultMap="bookingAgentLite">
        select * from booking_agent_work_for where email=#{email} and airline_name=#{airlineName}
    </select>

    <select id="findAgentByEmail" resultMap="bookingAgentLite">
        select * from booking_agent where email=#{email}
    </select>

    <insert id="grantAirlineStaff">
        <if test="permission!=null and permission.size()&gt; 0">
            <foreach collection="permission" item="permission_item">
                insert into permission(username,permission_type) values(#{userName},#{permission_item})
                 on duplicate key update username=#{userName}, permission_type=#{permission_item};
            </foreach>
        </if>
    </insert>



</mapper>